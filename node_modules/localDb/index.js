/**
 * Created by jibin on 17/2/21.
 */

const _createClass = (() => {
    let defineProperties = (target, props=[]) => {
        /**
         *  target @ Object
         *  props  @ Array
         */
        for(let prop of props){
            let descriptor = {};
            descriptor.enumerable = prop.enumerable || false;
            descriptor.configurable = true;
            if(prop.hasOwnProperty('value')){
                descriptor['value'] = prop['value'];
                descriptor.writable = true;
            }
            Object.defineProperty(target, prop.key, descriptor);
        }
    };

    return (Constructor, protoProps, staticProps) => {
        if(protoProps) defineProperties(Constructor.prototype, protoProps);
        if(staticProps) defineProperties(Constructor, staticProps);

        return Constructor;
    };
})();

const _classCallCheck = (instance, Constructor) => {
    if(!(instance instanceof Constructor)){
        throw new TypeError("cannot call a class as function!!!");
    }
};

let LocalDb = (() => {
    class LocalDb{
        constructor(...arg){
            _classCallCheck(this, LocalDb);

            let localDb = arg[0] === undefined ? 'localDb' : arg[0];

            if(!window.sessionStorage){
                throw new Error("sessionStorage Not Support!!!");
            }

            this.localDb = localDb;

            if(sessionStorage.getItem(localDb)){
                this.db = JSON.parse(sessionStorage.getItem(localDb));
            }else{
                this.db = {};
            }
        }
    }

    _createClass(LocalDb, [{
        key: 'getDb',
        value: function(){
            return this.db;
        }
    },{
        key: 'set',
        value: function(key, value){
            if(key){
                this.db[key] = value;
                
                return this._saveToSessionStorage();
            }else{
                throw new Error("set参数key不能为空!!!");
            }
        }
    },{
        key: '_saveToSessionStorage',
        value: function(){
            sessionStorage.setItem(this.localDb, JSON.stringify(this.getDb()));
        }
    },{
        key: 'get',
        value: function(key){
            if(key){
                let value = this.db[key];
                if(typeof value === "undefined"){
                    console.warn(key + "值不存在!!!");
                }
                return value;
            }else{
                throw new Error("get参数key不能为空!!!");
            }
        }
    },{
        key: 'clean',
        value: function(){
            this.db = {};
            this._saveToSessionStorage();
        }
    }]);

    return LocalDb;
})();

export default LocalDb;